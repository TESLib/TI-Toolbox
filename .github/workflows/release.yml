name: Release and Build

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 2.1.0)'
        required: true
        default: '2.0.0'

env:
  PYTHON_VERSION: '3.9'

jobs:
  build-executables:
    name: Build ${{ matrix.os }} executable
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: macos-latest
            artifact-name: TemporalInterferenceToolbox-macOS-universal
            artifact-path: launcher/executable/dist/TI-CSC.app
            archive-cmd: 'cd launcher/executable/dist && zip -r ../../../TemporalInterferenceToolbox-macOS-universal.zip TI-CSC.app'
            
          - os: windows-latest
            artifact-name: TemporalInterferenceToolbox-Windows-x64
            artifact-path: launcher/executable/dist/TI-CSC.exe
            archive-cmd: 'copy launcher\\executable\\dist\\TI-CSC.exe TemporalInterferenceToolbox-Windows-x64.exe'
            
          - os: ubuntu-latest
            artifact-name: TemporalInterferenceToolbox-Linux-x86_64
            artifact-path: launcher/executable/dist/TI-CSC
            archive-cmd: 'cp launcher/executable/dist/TI-CSC TemporalInterferenceToolbox-Linux-x86_64.AppImage && chmod +x TemporalInterferenceToolbox-Linux-x86_64.AppImage'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}

    - name: Install system dependencies (Ubuntu)
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential libgl1-mesa-glx libegl1-mesa libxrandr2 libxss1 libxcursor1 libxcomposite1 libasound2 libxi6 libxtst6

    - name: Install system dependencies (macOS)
      if: matrix.os == 'macos-latest'
      run: |
        # Install any macOS specific dependencies if needed
        echo "Setting up macOS build environment"

    - name: Update version in code
      shell: bash
      run: |
        # Extract version from GitHub release or workflow input
        if [ "${{ github.event_name }}" = "release" ]; then
          VERSION="${{ github.event.release.tag_name }}"
          VERSION="${VERSION#v}"  # Remove 'v' prefix if present
        else
          VERSION="${{ github.event.inputs.version }}"
        fi
        
        echo "Updating version to: $VERSION"
        
        # Update version.py
        sed -i.bak "s/__version__ = \".*\"/__version__ = \"$VERSION\"/" version.py
        sed -i.bak "s/\"version\": \".*\"/\"version\": \"$VERSION\"/" version.py
        
        # Update launcher version
        sed -i.bak "s/__version__ = \".*\"/__version__ = \"$VERSION\"/" launcher/executable/src/ti_csc_launcher.py
        sed -i.bak "s/\"version\": \".*\"/\"version\": \"$VERSION\"/" launcher/executable/src/ti_csc_launcher.py
        
        # Update dialogs version
        sed -i.bak "s/__version__ = \".*\"/__version__ = \"$VERSION\"/" launcher/executable/src/dialogs.py
        sed -i.bak "s/\"version\": \".*\"/\"version\": \"$VERSION\"/" launcher/executable/src/dialogs.py

    - name: Build executable
      working-directory: launcher/executable
      run: |
        python build.py

    - name: Create archive
      shell: bash
      run: |
        ${{ matrix.archive-cmd }}

    - name: Upload artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ matrix.artifact-name }}
        path: |
          ${{ matrix.artifact-name }}.*
          TemporalInterferenceToolbox-*

  update-website:
    name: Update website with new release
    runs-on: ubuntu-latest
    needs: build-executables
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract version information
      id: version_info
      run: |
        if [ "${{ github.event_name }}" = "release" ]; then
          VERSION="${{ github.event.release.tag_name }}"
          VERSION="${VERSION#v}"  # Remove 'v' prefix if present
          RELEASE_DATE=$(date '+%B %Y')
          RELEASE_NOTES="${{ github.event.release.body }}"
        else
          VERSION="${{ github.event.inputs.version }}"
          RELEASE_DATE=$(date '+%B %Y')
          RELEASE_NOTES="Manual release triggered via workflow dispatch"
        fi
        
        echo "version=$VERSION" >> $GITHUB_OUTPUT
        echo "release_date=$RELEASE_DATE" >> $GITHUB_OUTPUT
        echo "release_notes<<EOF" >> $GITHUB_OUTPUT
        echo "$RELEASE_NOTES" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: Update website version references
      run: |
        VERSION="${{ steps.version_info.outputs.version }}"
        RELEASE_DATE="${{ steps.version_info.outputs.release_date }}"
        
        # Update downloads page
        sed -i "s/Latest Release: Version .*/Latest Release: Version $VERSION/" docs/downloads.md
        sed -i "s/Released: .*/Released: $RELEASE_DATE/" docs/downloads.md
        sed -i "s/v[0-9]\+\.[0-9]\+\.[0-9]\+/v$VERSION/g" docs/downloads.md
        
        # Update index page
        sed -i "s/\*\*Version .*\*\*/\*\*Version $VERSION\*\*/" docs/index.md
        sed -i "s/Released .*/Released $RELEASE_DATE/" docs/index.md
        sed -i "s/version = {.*}/version = {$VERSION}/" docs/index.md
        
        # Update releases page - add new release at the top
        TEMP_FILE=$(mktemp)
        cat > $TEMP_FILE << 'EOF'
        <div class="release">
          <div class="release-header">
            <h2>Version $VERSION</h2>
            <span class="release-date">$RELEASE_DATE</span>
          </div>
          
          <p><strong>New Release</strong></p>
          
          <h3>ðŸ“‹ Release Notes</h3>
          <div style="background: #f5f5f5; padding: 15px; border-radius: 5px; margin: 10px 0;">
            <pre style="background: transparent; padding: 0; margin: 0; white-space: pre-wrap;">${{ steps.version_info.outputs.release_notes }}</pre>
          </div>
          
          <div class="release-downloads">
            <a href="https://github.com/idossha/TI-Toolbox/releases/download/v$VERSION/TemporalInterferenceToolbox-macOS-universal.zip">macOS</a>
            <a href="https://github.com/idossha/TI-Toolbox/releases/download/v$VERSION/TemporalInterferenceToolbox-Linux-x86_64.AppImage">Linux</a>
            <a href="https://github.com/idossha/TI-Toolbox/releases/download/v$VERSION/TemporalInterferenceToolbox-Windows-x64.exe">Windows</a>
          </div>
        </div>

        EOF
        
        # Insert the new release at the beginning of the releases section
        sed -i '/All notable changes and releases/r '"$TEMP_FILE" docs/releases.md
        
        # Substitute variables in the template
        sed -i "s/\$VERSION/$VERSION/g" docs/releases.md
        sed -i "s/\$RELEASE_DATE/$RELEASE_DATE/g" docs/releases.md

    - name: Commit and push website updates
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        git add docs/
        git diff --staged --quiet || git commit -m "Update website for release v${{ steps.version_info.outputs.version }}"
        git push

  upload-release-assets:
    name: Upload release assets
    runs-on: ubuntu-latest
    needs: build-executables
    if: github.event_name == 'release'
    
    steps:
    - name: Download all artifacts
      uses: actions/download-artifact@v3

    - name: Upload macOS asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./TemporalInterferenceToolbox-macOS-universal/TemporalInterferenceToolbox-macOS-universal.zip
        asset_name: TemporalInterferenceToolbox-macOS-universal.zip
        asset_content_type: application/zip

    - name: Upload Linux asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./TemporalInterferenceToolbox-Linux-x86_64/TemporalInterferenceToolbox-Linux-x86_64.AppImage
        asset_name: TemporalInterferenceToolbox-Linux-x86_64.AppImage
        asset_content_type: application/octet-stream

    - name: Upload Windows asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ github.event.release.upload_url }}
        asset_path: ./TemporalInterferenceToolbox-Windows-x64/TemporalInterferenceToolbox-Windows-x64.exe
        asset_name: TemporalInterferenceToolbox-Windows-x64.exe
        asset_content_type: application/octet-stream 